// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phxeditlog.proto

#ifndef PROTOBUF_phxeditlog_2eproto__INCLUDED
#define PROTOBUF_phxeditlog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace phxeditlog {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_phxeditlog_2eproto();
void protobuf_InitDefaults_phxeditlog_2eproto();
void protobuf_AssignDesc_phxeditlog_2eproto();
void protobuf_ShutdownFile_phxeditlog_2eproto();

class LogClose;
class LogCreate;
class LogGetAdditionalBlk;
class LogMkdir;
class LogOperator;
class LogRm;
class LogRmr;

// ===================================================================

class LogMkdir : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:phxeditlog.LogMkdir) */ {
 public:
  LogMkdir();
  virtual ~LogMkdir();

  LogMkdir(const LogMkdir& from);

  inline LogMkdir& operator=(const LogMkdir& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogMkdir& default_instance();

  static const LogMkdir* internal_default_instance();

  void Swap(LogMkdir* other);

  // implements Message ----------------------------------------------

  inline LogMkdir* New() const { return New(NULL); }

  LogMkdir* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogMkdir& from);
  void MergeFrom(const LogMkdir& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogMkdir* other);
  void UnsafeMergeFrom(const LogMkdir& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional uint32 permission = 2;
  void clear_permission();
  static const int kPermissionFieldNumber = 2;
  ::google::protobuf::uint32 permission() const;
  void set_permission(::google::protobuf::uint32 value);

  // optional string owner = 3;
  void clear_owner();
  static const int kOwnerFieldNumber = 3;
  const ::std::string& owner() const;
  void set_owner(const ::std::string& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  ::std::string* mutable_owner();
  ::std::string* release_owner();
  void set_allocated_owner(::std::string* owner);

  // optional string group = 4;
  void clear_group();
  static const int kGroupFieldNumber = 4;
  const ::std::string& group() const;
  void set_group(const ::std::string& value);
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  ::std::string* mutable_group();
  ::std::string* release_group();
  void set_allocated_group(::std::string* group);

  // optional uint64 modification_time = 5;
  void clear_modification_time();
  static const int kModificationTimeFieldNumber = 5;
  ::google::protobuf::uint64 modification_time() const;
  void set_modification_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:phxeditlog.LogMkdir)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr owner_;
  ::google::protobuf::internal::ArenaStringPtr group_;
  ::google::protobuf::uint64 modification_time_;
  ::google::protobuf::uint32 permission_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_phxeditlog_2eproto_impl();
  friend void  protobuf_AddDesc_phxeditlog_2eproto_impl();
  friend void protobuf_AssignDesc_phxeditlog_2eproto();
  friend void protobuf_ShutdownFile_phxeditlog_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LogMkdir> LogMkdir_default_instance_;

// -------------------------------------------------------------------

class LogRmr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:phxeditlog.LogRmr) */ {
 public:
  LogRmr();
  virtual ~LogRmr();

  LogRmr(const LogRmr& from);

  inline LogRmr& operator=(const LogRmr& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogRmr& default_instance();

  static const LogRmr* internal_default_instance();

  void Swap(LogRmr* other);

  // implements Message ----------------------------------------------

  inline LogRmr* New() const { return New(NULL); }

  LogRmr* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogRmr& from);
  void MergeFrom(const LogRmr& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogRmr* other);
  void UnsafeMergeFrom(const LogRmr& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional uint64 modification_time = 2;
  void clear_modification_time();
  static const int kModificationTimeFieldNumber = 2;
  ::google::protobuf::uint64 modification_time() const;
  void set_modification_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:phxeditlog.LogRmr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::uint64 modification_time_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_phxeditlog_2eproto_impl();
  friend void  protobuf_AddDesc_phxeditlog_2eproto_impl();
  friend void protobuf_AssignDesc_phxeditlog_2eproto();
  friend void protobuf_ShutdownFile_phxeditlog_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LogRmr> LogRmr_default_instance_;

// -------------------------------------------------------------------

class LogCreate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:phxeditlog.LogCreate) */ {
 public:
  LogCreate();
  virtual ~LogCreate();

  LogCreate(const LogCreate& from);

  inline LogCreate& operator=(const LogCreate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogCreate& default_instance();

  static const LogCreate* internal_default_instance();

  void Swap(LogCreate* other);

  // implements Message ----------------------------------------------

  inline LogCreate* New() const { return New(NULL); }

  LogCreate* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogCreate& from);
  void MergeFrom(const LogCreate& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogCreate* other);
  void UnsafeMergeFrom(const LogCreate& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional uint32 permission = 2;
  void clear_permission();
  static const int kPermissionFieldNumber = 2;
  ::google::protobuf::uint32 permission() const;
  void set_permission(::google::protobuf::uint32 value);

  // optional string owner = 3;
  void clear_owner();
  static const int kOwnerFieldNumber = 3;
  const ::std::string& owner() const;
  void set_owner(const ::std::string& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  ::std::string* mutable_owner();
  ::std::string* release_owner();
  void set_allocated_owner(::std::string* owner);

  // optional string group = 4;
  void clear_group();
  static const int kGroupFieldNumber = 4;
  const ::std::string& group() const;
  void set_group(const ::std::string& value);
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  ::std::string* mutable_group();
  ::std::string* release_group();
  void set_allocated_group(::std::string* group);

  // optional uint64 modification_time = 5;
  void clear_modification_time();
  static const int kModificationTimeFieldNumber = 5;
  ::google::protobuf::uint64 modification_time() const;
  void set_modification_time(::google::protobuf::uint64 value);

  // optional uint64 blk_id = 6;
  void clear_blk_id();
  static const int kBlkIdFieldNumber = 6;
  ::google::protobuf::uint64 blk_id() const;
  void set_blk_id(::google::protobuf::uint64 value);

  // optional uint64 blk_sz = 7;
  void clear_blk_sz();
  static const int kBlkSzFieldNumber = 7;
  ::google::protobuf::uint64 blk_sz() const;
  void set_blk_sz(::google::protobuf::uint64 value);

  // optional uint32 blk_rep = 8;
  void clear_blk_rep();
  static const int kBlkRepFieldNumber = 8;
  ::google::protobuf::uint32 blk_rep() const;
  void set_blk_rep(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:phxeditlog.LogCreate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr owner_;
  ::google::protobuf::internal::ArenaStringPtr group_;
  ::google::protobuf::uint64 modification_time_;
  ::google::protobuf::uint32 permission_;
  ::google::protobuf::uint32 blk_rep_;
  ::google::protobuf::uint64 blk_id_;
  ::google::protobuf::uint64 blk_sz_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_phxeditlog_2eproto_impl();
  friend void  protobuf_AddDesc_phxeditlog_2eproto_impl();
  friend void protobuf_AssignDesc_phxeditlog_2eproto();
  friend void protobuf_ShutdownFile_phxeditlog_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LogCreate> LogCreate_default_instance_;

// -------------------------------------------------------------------

class LogGetAdditionalBlk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:phxeditlog.LogGetAdditionalBlk) */ {
 public:
  LogGetAdditionalBlk();
  virtual ~LogGetAdditionalBlk();

  LogGetAdditionalBlk(const LogGetAdditionalBlk& from);

  inline LogGetAdditionalBlk& operator=(const LogGetAdditionalBlk& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogGetAdditionalBlk& default_instance();

  static const LogGetAdditionalBlk* internal_default_instance();

  void Swap(LogGetAdditionalBlk* other);

  // implements Message ----------------------------------------------

  inline LogGetAdditionalBlk* New() const { return New(NULL); }

  LogGetAdditionalBlk* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogGetAdditionalBlk& from);
  void MergeFrom(const LogGetAdditionalBlk& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogGetAdditionalBlk* other);
  void UnsafeMergeFrom(const LogGetAdditionalBlk& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional uint64 blk_id = 2;
  void clear_blk_id();
  static const int kBlkIdFieldNumber = 2;
  ::google::protobuf::uint64 blk_id() const;
  void set_blk_id(::google::protobuf::uint64 value);

  // optional uint64 blk_sz = 3;
  void clear_blk_sz();
  static const int kBlkSzFieldNumber = 3;
  ::google::protobuf::uint64 blk_sz() const;
  void set_blk_sz(::google::protobuf::uint64 value);

  // optional uint32 blk_rep = 4;
  void clear_blk_rep();
  static const int kBlkRepFieldNumber = 4;
  ::google::protobuf::uint32 blk_rep() const;
  void set_blk_rep(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:phxeditlog.LogGetAdditionalBlk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::uint64 blk_id_;
  ::google::protobuf::uint64 blk_sz_;
  ::google::protobuf::uint32 blk_rep_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_phxeditlog_2eproto_impl();
  friend void  protobuf_AddDesc_phxeditlog_2eproto_impl();
  friend void protobuf_AssignDesc_phxeditlog_2eproto();
  friend void protobuf_ShutdownFile_phxeditlog_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LogGetAdditionalBlk> LogGetAdditionalBlk_default_instance_;

// -------------------------------------------------------------------

class LogClose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:phxeditlog.LogClose) */ {
 public:
  LogClose();
  virtual ~LogClose();

  LogClose(const LogClose& from);

  inline LogClose& operator=(const LogClose& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogClose& default_instance();

  static const LogClose* internal_default_instance();

  void Swap(LogClose* other);

  // implements Message ----------------------------------------------

  inline LogClose* New() const { return New(NULL); }

  LogClose* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogClose& from);
  void MergeFrom(const LogClose& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogClose* other);
  void UnsafeMergeFrom(const LogClose& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional uint64 modification_time = 2;
  void clear_modification_time();
  static const int kModificationTimeFieldNumber = 2;
  ::google::protobuf::uint64 modification_time() const;
  void set_modification_time(::google::protobuf::uint64 value);

  // optional uint64 len = 3;
  void clear_len();
  static const int kLenFieldNumber = 3;
  ::google::protobuf::uint64 len() const;
  void set_len(::google::protobuf::uint64 value);

  // optional uint32 blk_rep = 4;
  void clear_blk_rep();
  static const int kBlkRepFieldNumber = 4;
  ::google::protobuf::uint32 blk_rep() const;
  void set_blk_rep(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:phxeditlog.LogClose)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::uint64 modification_time_;
  ::google::protobuf::uint64 len_;
  ::google::protobuf::uint32 blk_rep_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_phxeditlog_2eproto_impl();
  friend void  protobuf_AddDesc_phxeditlog_2eproto_impl();
  friend void protobuf_AssignDesc_phxeditlog_2eproto();
  friend void protobuf_ShutdownFile_phxeditlog_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LogClose> LogClose_default_instance_;

// -------------------------------------------------------------------

class LogRm : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:phxeditlog.LogRm) */ {
 public:
  LogRm();
  virtual ~LogRm();

  LogRm(const LogRm& from);

  inline LogRm& operator=(const LogRm& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogRm& default_instance();

  static const LogRm* internal_default_instance();

  void Swap(LogRm* other);

  // implements Message ----------------------------------------------

  inline LogRm* New() const { return New(NULL); }

  LogRm* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogRm& from);
  void MergeFrom(const LogRm& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogRm* other);
  void UnsafeMergeFrom(const LogRm& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional uint64 modification_time = 2;
  void clear_modification_time();
  static const int kModificationTimeFieldNumber = 2;
  ::google::protobuf::uint64 modification_time() const;
  void set_modification_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:phxeditlog.LogRm)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::uint64 modification_time_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_phxeditlog_2eproto_impl();
  friend void  protobuf_AddDesc_phxeditlog_2eproto_impl();
  friend void protobuf_AssignDesc_phxeditlog_2eproto();
  friend void protobuf_ShutdownFile_phxeditlog_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LogRm> LogRm_default_instance_;

// -------------------------------------------------------------------

class LogOperator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:phxeditlog.LogOperator) */ {
 public:
  LogOperator();
  virtual ~LogOperator();

  LogOperator(const LogOperator& from);

  inline LogOperator& operator=(const LogOperator& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogOperator& default_instance();

  static const LogOperator* internal_default_instance();

  void Swap(LogOperator* other);

  // implements Message ----------------------------------------------

  inline LogOperator* New() const { return New(NULL); }

  LogOperator* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogOperator& from);
  void MergeFrom(const LogOperator& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogOperator* other);
  void UnsafeMergeFrom(const LogOperator& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 optype = 1;
  void clear_optype();
  static const int kOptypeFieldNumber = 1;
  ::google::protobuf::uint32 optype() const;
  void set_optype(::google::protobuf::uint32 value);

  // optional .phxeditlog.LogMkdir mkr = 2;
  bool has_mkr() const;
  void clear_mkr();
  static const int kMkrFieldNumber = 2;
  const ::phxeditlog::LogMkdir& mkr() const;
  ::phxeditlog::LogMkdir* mutable_mkr();
  ::phxeditlog::LogMkdir* release_mkr();
  void set_allocated_mkr(::phxeditlog::LogMkdir* mkr);

  // optional .phxeditlog.LogRmr rmr = 3;
  bool has_rmr() const;
  void clear_rmr();
  static const int kRmrFieldNumber = 3;
  const ::phxeditlog::LogRmr& rmr() const;
  ::phxeditlog::LogRmr* mutable_rmr();
  ::phxeditlog::LogRmr* release_rmr();
  void set_allocated_rmr(::phxeditlog::LogRmr* rmr);

  // optional .phxeditlog.LogCreate cre = 4;
  bool has_cre() const;
  void clear_cre();
  static const int kCreFieldNumber = 4;
  const ::phxeditlog::LogCreate& cre() const;
  ::phxeditlog::LogCreate* mutable_cre();
  ::phxeditlog::LogCreate* release_cre();
  void set_allocated_cre(::phxeditlog::LogCreate* cre);

  // optional .phxeditlog.LogGetAdditionalBlk gab = 5;
  bool has_gab() const;
  void clear_gab();
  static const int kGabFieldNumber = 5;
  const ::phxeditlog::LogGetAdditionalBlk& gab() const;
  ::phxeditlog::LogGetAdditionalBlk* mutable_gab();
  ::phxeditlog::LogGetAdditionalBlk* release_gab();
  void set_allocated_gab(::phxeditlog::LogGetAdditionalBlk* gab);

  // optional .phxeditlog.LogClose cle = 6;
  bool has_cle() const;
  void clear_cle();
  static const int kCleFieldNumber = 6;
  const ::phxeditlog::LogClose& cle() const;
  ::phxeditlog::LogClose* mutable_cle();
  ::phxeditlog::LogClose* release_cle();
  void set_allocated_cle(::phxeditlog::LogClose* cle);

  // optional .phxeditlog.LogRm rm = 7;
  bool has_rm() const;
  void clear_rm();
  static const int kRmFieldNumber = 7;
  const ::phxeditlog::LogRm& rm() const;
  ::phxeditlog::LogRm* mutable_rm();
  ::phxeditlog::LogRm* release_rm();
  void set_allocated_rm(::phxeditlog::LogRm* rm);

  // @@protoc_insertion_point(class_scope:phxeditlog.LogOperator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::phxeditlog::LogMkdir* mkr_;
  ::phxeditlog::LogRmr* rmr_;
  ::phxeditlog::LogCreate* cre_;
  ::phxeditlog::LogGetAdditionalBlk* gab_;
  ::phxeditlog::LogClose* cle_;
  ::phxeditlog::LogRm* rm_;
  ::google::protobuf::uint32 optype_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_phxeditlog_2eproto_impl();
  friend void  protobuf_AddDesc_phxeditlog_2eproto_impl();
  friend void protobuf_AssignDesc_phxeditlog_2eproto();
  friend void protobuf_ShutdownFile_phxeditlog_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LogOperator> LogOperator_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LogMkdir

// optional string key = 1;
inline void LogMkdir::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogMkdir::key() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogMkdir.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogMkdir::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogMkdir.key)
}
inline void LogMkdir::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogMkdir.key)
}
inline void LogMkdir::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogMkdir.key)
}
inline ::std::string* LogMkdir::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogMkdir.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogMkdir::release_key() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogMkdir.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogMkdir::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogMkdir.key)
}

// optional uint32 permission = 2;
inline void LogMkdir::clear_permission() {
  permission_ = 0u;
}
inline ::google::protobuf::uint32 LogMkdir::permission() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogMkdir.permission)
  return permission_;
}
inline void LogMkdir::set_permission(::google::protobuf::uint32 value) {
  
  permission_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogMkdir.permission)
}

// optional string owner = 3;
inline void LogMkdir::clear_owner() {
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogMkdir::owner() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogMkdir.owner)
  return owner_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogMkdir::set_owner(const ::std::string& value) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogMkdir.owner)
}
inline void LogMkdir::set_owner(const char* value) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogMkdir.owner)
}
inline void LogMkdir::set_owner(const char* value, size_t size) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogMkdir.owner)
}
inline ::std::string* LogMkdir::mutable_owner() {
  
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogMkdir.owner)
  return owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogMkdir::release_owner() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogMkdir.owner)
  
  return owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogMkdir::set_allocated_owner(::std::string* owner) {
  if (owner != NULL) {
    
  } else {
    
  }
  owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogMkdir.owner)
}

// optional string group = 4;
inline void LogMkdir::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogMkdir::group() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogMkdir.group)
  return group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogMkdir::set_group(const ::std::string& value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogMkdir.group)
}
inline void LogMkdir::set_group(const char* value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogMkdir.group)
}
inline void LogMkdir::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogMkdir.group)
}
inline ::std::string* LogMkdir::mutable_group() {
  
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogMkdir.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogMkdir::release_group() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogMkdir.group)
  
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogMkdir::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogMkdir.group)
}

// optional uint64 modification_time = 5;
inline void LogMkdir::clear_modification_time() {
  modification_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LogMkdir::modification_time() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogMkdir.modification_time)
  return modification_time_;
}
inline void LogMkdir::set_modification_time(::google::protobuf::uint64 value) {
  
  modification_time_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogMkdir.modification_time)
}

inline const LogMkdir* LogMkdir::internal_default_instance() {
  return &LogMkdir_default_instance_.get();
}
// -------------------------------------------------------------------

// LogRmr

// optional string key = 1;
inline void LogRmr::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogRmr::key() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogRmr.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRmr::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogRmr.key)
}
inline void LogRmr::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogRmr.key)
}
inline void LogRmr::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogRmr.key)
}
inline ::std::string* LogRmr::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogRmr.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogRmr::release_key() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogRmr.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRmr::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogRmr.key)
}

// optional uint64 modification_time = 2;
inline void LogRmr::clear_modification_time() {
  modification_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LogRmr::modification_time() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogRmr.modification_time)
  return modification_time_;
}
inline void LogRmr::set_modification_time(::google::protobuf::uint64 value) {
  
  modification_time_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogRmr.modification_time)
}

inline const LogRmr* LogRmr::internal_default_instance() {
  return &LogRmr_default_instance_.get();
}
// -------------------------------------------------------------------

// LogCreate

// optional string key = 1;
inline void LogCreate::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogCreate::key() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogCreate::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.key)
}
inline void LogCreate::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogCreate.key)
}
inline void LogCreate::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogCreate.key)
}
inline ::std::string* LogCreate::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogCreate.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogCreate::release_key() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogCreate.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogCreate::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogCreate.key)
}

// optional uint32 permission = 2;
inline void LogCreate::clear_permission() {
  permission_ = 0u;
}
inline ::google::protobuf::uint32 LogCreate::permission() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.permission)
  return permission_;
}
inline void LogCreate::set_permission(::google::protobuf::uint32 value) {
  
  permission_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.permission)
}

// optional string owner = 3;
inline void LogCreate::clear_owner() {
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogCreate::owner() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.owner)
  return owner_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogCreate::set_owner(const ::std::string& value) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.owner)
}
inline void LogCreate::set_owner(const char* value) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogCreate.owner)
}
inline void LogCreate::set_owner(const char* value, size_t size) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogCreate.owner)
}
inline ::std::string* LogCreate::mutable_owner() {
  
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogCreate.owner)
  return owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogCreate::release_owner() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogCreate.owner)
  
  return owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogCreate::set_allocated_owner(::std::string* owner) {
  if (owner != NULL) {
    
  } else {
    
  }
  owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogCreate.owner)
}

// optional string group = 4;
inline void LogCreate::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogCreate::group() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.group)
  return group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogCreate::set_group(const ::std::string& value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.group)
}
inline void LogCreate::set_group(const char* value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogCreate.group)
}
inline void LogCreate::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogCreate.group)
}
inline ::std::string* LogCreate::mutable_group() {
  
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogCreate.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogCreate::release_group() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogCreate.group)
  
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogCreate::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogCreate.group)
}

// optional uint64 modification_time = 5;
inline void LogCreate::clear_modification_time() {
  modification_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LogCreate::modification_time() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.modification_time)
  return modification_time_;
}
inline void LogCreate::set_modification_time(::google::protobuf::uint64 value) {
  
  modification_time_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.modification_time)
}

// optional uint64 blk_id = 6;
inline void LogCreate::clear_blk_id() {
  blk_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LogCreate::blk_id() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.blk_id)
  return blk_id_;
}
inline void LogCreate::set_blk_id(::google::protobuf::uint64 value) {
  
  blk_id_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.blk_id)
}

// optional uint64 blk_sz = 7;
inline void LogCreate::clear_blk_sz() {
  blk_sz_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LogCreate::blk_sz() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.blk_sz)
  return blk_sz_;
}
inline void LogCreate::set_blk_sz(::google::protobuf::uint64 value) {
  
  blk_sz_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.blk_sz)
}

// optional uint32 blk_rep = 8;
inline void LogCreate::clear_blk_rep() {
  blk_rep_ = 0u;
}
inline ::google::protobuf::uint32 LogCreate::blk_rep() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.blk_rep)
  return blk_rep_;
}
inline void LogCreate::set_blk_rep(::google::protobuf::uint32 value) {
  
  blk_rep_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.blk_rep)
}

inline const LogCreate* LogCreate::internal_default_instance() {
  return &LogCreate_default_instance_.get();
}
// -------------------------------------------------------------------

// LogGetAdditionalBlk

// optional string key = 1;
inline void LogGetAdditionalBlk::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogGetAdditionalBlk::key() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogGetAdditionalBlk.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogGetAdditionalBlk::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogGetAdditionalBlk.key)
}
inline void LogGetAdditionalBlk::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogGetAdditionalBlk.key)
}
inline void LogGetAdditionalBlk::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogGetAdditionalBlk.key)
}
inline ::std::string* LogGetAdditionalBlk::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogGetAdditionalBlk.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogGetAdditionalBlk::release_key() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogGetAdditionalBlk.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogGetAdditionalBlk::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogGetAdditionalBlk.key)
}

// optional uint64 blk_id = 2;
inline void LogGetAdditionalBlk::clear_blk_id() {
  blk_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LogGetAdditionalBlk::blk_id() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogGetAdditionalBlk.blk_id)
  return blk_id_;
}
inline void LogGetAdditionalBlk::set_blk_id(::google::protobuf::uint64 value) {
  
  blk_id_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogGetAdditionalBlk.blk_id)
}

// optional uint64 blk_sz = 3;
inline void LogGetAdditionalBlk::clear_blk_sz() {
  blk_sz_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LogGetAdditionalBlk::blk_sz() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogGetAdditionalBlk.blk_sz)
  return blk_sz_;
}
inline void LogGetAdditionalBlk::set_blk_sz(::google::protobuf::uint64 value) {
  
  blk_sz_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogGetAdditionalBlk.blk_sz)
}

// optional uint32 blk_rep = 4;
inline void LogGetAdditionalBlk::clear_blk_rep() {
  blk_rep_ = 0u;
}
inline ::google::protobuf::uint32 LogGetAdditionalBlk::blk_rep() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogGetAdditionalBlk.blk_rep)
  return blk_rep_;
}
inline void LogGetAdditionalBlk::set_blk_rep(::google::protobuf::uint32 value) {
  
  blk_rep_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogGetAdditionalBlk.blk_rep)
}

inline const LogGetAdditionalBlk* LogGetAdditionalBlk::internal_default_instance() {
  return &LogGetAdditionalBlk_default_instance_.get();
}
// -------------------------------------------------------------------

// LogClose

// optional string key = 1;
inline void LogClose::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogClose::key() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogClose.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogClose::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogClose.key)
}
inline void LogClose::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogClose.key)
}
inline void LogClose::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogClose.key)
}
inline ::std::string* LogClose::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogClose.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogClose::release_key() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogClose.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogClose::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogClose.key)
}

// optional uint64 modification_time = 2;
inline void LogClose::clear_modification_time() {
  modification_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LogClose::modification_time() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogClose.modification_time)
  return modification_time_;
}
inline void LogClose::set_modification_time(::google::protobuf::uint64 value) {
  
  modification_time_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogClose.modification_time)
}

// optional uint64 len = 3;
inline void LogClose::clear_len() {
  len_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LogClose::len() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogClose.len)
  return len_;
}
inline void LogClose::set_len(::google::protobuf::uint64 value) {
  
  len_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogClose.len)
}

// optional uint32 blk_rep = 4;
inline void LogClose::clear_blk_rep() {
  blk_rep_ = 0u;
}
inline ::google::protobuf::uint32 LogClose::blk_rep() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogClose.blk_rep)
  return blk_rep_;
}
inline void LogClose::set_blk_rep(::google::protobuf::uint32 value) {
  
  blk_rep_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogClose.blk_rep)
}

inline const LogClose* LogClose::internal_default_instance() {
  return &LogClose_default_instance_.get();
}
// -------------------------------------------------------------------

// LogRm

// optional string key = 1;
inline void LogRm::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogRm::key() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogRm.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRm::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogRm.key)
}
inline void LogRm::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogRm.key)
}
inline void LogRm::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogRm.key)
}
inline ::std::string* LogRm::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogRm.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogRm::release_key() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogRm.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRm::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogRm.key)
}

// optional uint64 modification_time = 2;
inline void LogRm::clear_modification_time() {
  modification_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LogRm::modification_time() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogRm.modification_time)
  return modification_time_;
}
inline void LogRm::set_modification_time(::google::protobuf::uint64 value) {
  
  modification_time_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogRm.modification_time)
}

inline const LogRm* LogRm::internal_default_instance() {
  return &LogRm_default_instance_.get();
}
// -------------------------------------------------------------------

// LogOperator

// optional uint32 optype = 1;
inline void LogOperator::clear_optype() {
  optype_ = 0u;
}
inline ::google::protobuf::uint32 LogOperator::optype() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogOperator.optype)
  return optype_;
}
inline void LogOperator::set_optype(::google::protobuf::uint32 value) {
  
  optype_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogOperator.optype)
}

// optional .phxeditlog.LogMkdir mkr = 2;
inline bool LogOperator::has_mkr() const {
  return this != internal_default_instance() && mkr_ != NULL;
}
inline void LogOperator::clear_mkr() {
  if (GetArenaNoVirtual() == NULL && mkr_ != NULL) delete mkr_;
  mkr_ = NULL;
}
inline const ::phxeditlog::LogMkdir& LogOperator::mkr() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogOperator.mkr)
  return mkr_ != NULL ? *mkr_
                         : *::phxeditlog::LogMkdir::internal_default_instance();
}
inline ::phxeditlog::LogMkdir* LogOperator::mutable_mkr() {
  
  if (mkr_ == NULL) {
    mkr_ = new ::phxeditlog::LogMkdir;
  }
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogOperator.mkr)
  return mkr_;
}
inline ::phxeditlog::LogMkdir* LogOperator::release_mkr() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogOperator.mkr)
  
  ::phxeditlog::LogMkdir* temp = mkr_;
  mkr_ = NULL;
  return temp;
}
inline void LogOperator::set_allocated_mkr(::phxeditlog::LogMkdir* mkr) {
  delete mkr_;
  mkr_ = mkr;
  if (mkr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogOperator.mkr)
}

// optional .phxeditlog.LogRmr rmr = 3;
inline bool LogOperator::has_rmr() const {
  return this != internal_default_instance() && rmr_ != NULL;
}
inline void LogOperator::clear_rmr() {
  if (GetArenaNoVirtual() == NULL && rmr_ != NULL) delete rmr_;
  rmr_ = NULL;
}
inline const ::phxeditlog::LogRmr& LogOperator::rmr() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogOperator.rmr)
  return rmr_ != NULL ? *rmr_
                         : *::phxeditlog::LogRmr::internal_default_instance();
}
inline ::phxeditlog::LogRmr* LogOperator::mutable_rmr() {
  
  if (rmr_ == NULL) {
    rmr_ = new ::phxeditlog::LogRmr;
  }
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogOperator.rmr)
  return rmr_;
}
inline ::phxeditlog::LogRmr* LogOperator::release_rmr() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogOperator.rmr)
  
  ::phxeditlog::LogRmr* temp = rmr_;
  rmr_ = NULL;
  return temp;
}
inline void LogOperator::set_allocated_rmr(::phxeditlog::LogRmr* rmr) {
  delete rmr_;
  rmr_ = rmr;
  if (rmr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogOperator.rmr)
}

// optional .phxeditlog.LogCreate cre = 4;
inline bool LogOperator::has_cre() const {
  return this != internal_default_instance() && cre_ != NULL;
}
inline void LogOperator::clear_cre() {
  if (GetArenaNoVirtual() == NULL && cre_ != NULL) delete cre_;
  cre_ = NULL;
}
inline const ::phxeditlog::LogCreate& LogOperator::cre() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogOperator.cre)
  return cre_ != NULL ? *cre_
                         : *::phxeditlog::LogCreate::internal_default_instance();
}
inline ::phxeditlog::LogCreate* LogOperator::mutable_cre() {
  
  if (cre_ == NULL) {
    cre_ = new ::phxeditlog::LogCreate;
  }
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogOperator.cre)
  return cre_;
}
inline ::phxeditlog::LogCreate* LogOperator::release_cre() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogOperator.cre)
  
  ::phxeditlog::LogCreate* temp = cre_;
  cre_ = NULL;
  return temp;
}
inline void LogOperator::set_allocated_cre(::phxeditlog::LogCreate* cre) {
  delete cre_;
  cre_ = cre;
  if (cre) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogOperator.cre)
}

// optional .phxeditlog.LogGetAdditionalBlk gab = 5;
inline bool LogOperator::has_gab() const {
  return this != internal_default_instance() && gab_ != NULL;
}
inline void LogOperator::clear_gab() {
  if (GetArenaNoVirtual() == NULL && gab_ != NULL) delete gab_;
  gab_ = NULL;
}
inline const ::phxeditlog::LogGetAdditionalBlk& LogOperator::gab() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogOperator.gab)
  return gab_ != NULL ? *gab_
                         : *::phxeditlog::LogGetAdditionalBlk::internal_default_instance();
}
inline ::phxeditlog::LogGetAdditionalBlk* LogOperator::mutable_gab() {
  
  if (gab_ == NULL) {
    gab_ = new ::phxeditlog::LogGetAdditionalBlk;
  }
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogOperator.gab)
  return gab_;
}
inline ::phxeditlog::LogGetAdditionalBlk* LogOperator::release_gab() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogOperator.gab)
  
  ::phxeditlog::LogGetAdditionalBlk* temp = gab_;
  gab_ = NULL;
  return temp;
}
inline void LogOperator::set_allocated_gab(::phxeditlog::LogGetAdditionalBlk* gab) {
  delete gab_;
  gab_ = gab;
  if (gab) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogOperator.gab)
}

// optional .phxeditlog.LogClose cle = 6;
inline bool LogOperator::has_cle() const {
  return this != internal_default_instance() && cle_ != NULL;
}
inline void LogOperator::clear_cle() {
  if (GetArenaNoVirtual() == NULL && cle_ != NULL) delete cle_;
  cle_ = NULL;
}
inline const ::phxeditlog::LogClose& LogOperator::cle() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogOperator.cle)
  return cle_ != NULL ? *cle_
                         : *::phxeditlog::LogClose::internal_default_instance();
}
inline ::phxeditlog::LogClose* LogOperator::mutable_cle() {
  
  if (cle_ == NULL) {
    cle_ = new ::phxeditlog::LogClose;
  }
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogOperator.cle)
  return cle_;
}
inline ::phxeditlog::LogClose* LogOperator::release_cle() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogOperator.cle)
  
  ::phxeditlog::LogClose* temp = cle_;
  cle_ = NULL;
  return temp;
}
inline void LogOperator::set_allocated_cle(::phxeditlog::LogClose* cle) {
  delete cle_;
  cle_ = cle;
  if (cle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogOperator.cle)
}

// optional .phxeditlog.LogRm rm = 7;
inline bool LogOperator::has_rm() const {
  return this != internal_default_instance() && rm_ != NULL;
}
inline void LogOperator::clear_rm() {
  if (GetArenaNoVirtual() == NULL && rm_ != NULL) delete rm_;
  rm_ = NULL;
}
inline const ::phxeditlog::LogRm& LogOperator::rm() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogOperator.rm)
  return rm_ != NULL ? *rm_
                         : *::phxeditlog::LogRm::internal_default_instance();
}
inline ::phxeditlog::LogRm* LogOperator::mutable_rm() {
  
  if (rm_ == NULL) {
    rm_ = new ::phxeditlog::LogRm;
  }
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogOperator.rm)
  return rm_;
}
inline ::phxeditlog::LogRm* LogOperator::release_rm() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogOperator.rm)
  
  ::phxeditlog::LogRm* temp = rm_;
  rm_ = NULL;
  return temp;
}
inline void LogOperator::set_allocated_rm(::phxeditlog::LogRm* rm) {
  delete rm_;
  rm_ = rm;
  if (rm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogOperator.rm)
}

inline const LogOperator* LogOperator::internal_default_instance() {
  return &LogOperator_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace phxeditlog

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_phxeditlog_2eproto__INCLUDED
