// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phxeditlog.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "phxeditlog.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace phxeditlog {

namespace {

const ::google::protobuf::Descriptor* LogMkdir_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogMkdir_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogRmr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogRmr_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogGetAdditionalBlk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogGetAdditionalBlk_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogClose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogClose_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogRm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogRm_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogOperator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogOperator_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_phxeditlog_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_phxeditlog_2eproto() {
  protobuf_AddDesc_phxeditlog_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "phxeditlog.proto");
  GOOGLE_CHECK(file != NULL);
  LogMkdir_descriptor_ = file->message_type(0);
  static const int LogMkdir_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMkdir, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMkdir, permission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMkdir, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMkdir, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMkdir, modification_time_),
  };
  LogMkdir_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogMkdir_descriptor_,
      LogMkdir::internal_default_instance(),
      LogMkdir_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogMkdir),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMkdir, _internal_metadata_));
  LogRmr_descriptor_ = file->message_type(1);
  static const int LogRmr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRmr, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRmr, modification_time_),
  };
  LogRmr_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogRmr_descriptor_,
      LogRmr::internal_default_instance(),
      LogRmr_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogRmr),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRmr, _internal_metadata_));
  LogCreate_descriptor_ = file->message_type(2);
  static const int LogCreate_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogCreate, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogCreate, permission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogCreate, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogCreate, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogCreate, modification_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogCreate, blk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogCreate, blk_sz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogCreate, blk_rep_),
  };
  LogCreate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogCreate_descriptor_,
      LogCreate::internal_default_instance(),
      LogCreate_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogCreate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogCreate, _internal_metadata_));
  LogGetAdditionalBlk_descriptor_ = file->message_type(3);
  static const int LogGetAdditionalBlk_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGetAdditionalBlk, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGetAdditionalBlk, blk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGetAdditionalBlk, blk_sz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGetAdditionalBlk, blk_rep_),
  };
  LogGetAdditionalBlk_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogGetAdditionalBlk_descriptor_,
      LogGetAdditionalBlk::internal_default_instance(),
      LogGetAdditionalBlk_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogGetAdditionalBlk),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGetAdditionalBlk, _internal_metadata_));
  LogClose_descriptor_ = file->message_type(4);
  static const int LogClose_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClose, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClose, modification_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClose, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClose, blk_rep_),
  };
  LogClose_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogClose_descriptor_,
      LogClose::internal_default_instance(),
      LogClose_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogClose),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogClose, _internal_metadata_));
  LogRm_descriptor_ = file->message_type(5);
  static const int LogRm_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRm, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRm, modification_time_),
  };
  LogRm_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogRm_descriptor_,
      LogRm::internal_default_instance(),
      LogRm_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogRm),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRm, _internal_metadata_));
  LogOperator_descriptor_ = file->message_type(6);
  static const int LogOperator_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOperator, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOperator, mkr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOperator, rmr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOperator, cre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOperator, gab_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOperator, cle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOperator, rm_),
  };
  LogOperator_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogOperator_descriptor_,
      LogOperator::internal_default_instance(),
      LogOperator_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogOperator),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOperator, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_phxeditlog_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogMkdir_descriptor_, LogMkdir::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogRmr_descriptor_, LogRmr::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogCreate_descriptor_, LogCreate::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogGetAdditionalBlk_descriptor_, LogGetAdditionalBlk::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogClose_descriptor_, LogClose::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogRm_descriptor_, LogRm::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogOperator_descriptor_, LogOperator::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_phxeditlog_2eproto() {
  LogMkdir_default_instance_.Shutdown();
  delete LogMkdir_reflection_;
  LogRmr_default_instance_.Shutdown();
  delete LogRmr_reflection_;
  LogCreate_default_instance_.Shutdown();
  delete LogCreate_reflection_;
  LogGetAdditionalBlk_default_instance_.Shutdown();
  delete LogGetAdditionalBlk_reflection_;
  LogClose_default_instance_.Shutdown();
  delete LogClose_reflection_;
  LogRm_default_instance_.Shutdown();
  delete LogRm_reflection_;
  LogOperator_default_instance_.Shutdown();
  delete LogOperator_reflection_;
}

void protobuf_InitDefaults_phxeditlog_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  LogMkdir_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  LogRmr_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  LogCreate_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  LogGetAdditionalBlk_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  LogClose_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  LogRm_default_instance_.DefaultConstruct();
  LogOperator_default_instance_.DefaultConstruct();
  LogMkdir_default_instance_.get_mutable()->InitAsDefaultInstance();
  LogRmr_default_instance_.get_mutable()->InitAsDefaultInstance();
  LogCreate_default_instance_.get_mutable()->InitAsDefaultInstance();
  LogGetAdditionalBlk_default_instance_.get_mutable()->InitAsDefaultInstance();
  LogClose_default_instance_.get_mutable()->InitAsDefaultInstance();
  LogRm_default_instance_.get_mutable()->InitAsDefaultInstance();
  LogOperator_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_phxeditlog_2eproto_once_);
void protobuf_InitDefaults_phxeditlog_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_phxeditlog_2eproto_once_,
                 &protobuf_InitDefaults_phxeditlog_2eproto_impl);
}
void protobuf_AddDesc_phxeditlog_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_phxeditlog_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020phxeditlog.proto\022\nphxeditlog\"d\n\010LogMkd"
    "ir\022\013\n\003key\030\001 \001(\t\022\022\n\npermission\030\002 \001(\r\022\r\n\005o"
    "wner\030\003 \001(\t\022\r\n\005group\030\004 \001(\t\022\031\n\021modificatio"
    "n_time\030\005 \001(\004\"0\n\006LogRmr\022\013\n\003key\030\001 \001(\t\022\031\n\021m"
    "odification_time\030\002 \001(\004\"\226\001\n\tLogCreate\022\013\n\003"
    "key\030\001 \001(\t\022\022\n\npermission\030\002 \001(\r\022\r\n\005owner\030\003"
    " \001(\t\022\r\n\005group\030\004 \001(\t\022\031\n\021modification_time"
    "\030\005 \001(\004\022\016\n\006blk_id\030\006 \001(\004\022\016\n\006blk_sz\030\007 \001(\004\022\017"
    "\n\007blk_rep\030\010 \001(\r\"S\n\023LogGetAdditionalBlk\022\013"
    "\n\003key\030\001 \001(\t\022\016\n\006blk_id\030\002 \001(\004\022\016\n\006blk_sz\030\003 "
    "\001(\004\022\017\n\007blk_rep\030\004 \001(\r\"P\n\010LogClose\022\013\n\003key\030"
    "\001 \001(\t\022\031\n\021modification_time\030\002 \001(\004\022\013\n\003len\030"
    "\003 \001(\004\022\017\n\007blk_rep\030\004 \001(\r\"/\n\005LogRm\022\013\n\003key\030\001"
    " \001(\t\022\031\n\021modification_time\030\002 \001(\004\"\365\001\n\013LogO"
    "perator\022\016\n\006optype\030\001 \001(\r\022!\n\003mkr\030\002 \001(\0132\024.p"
    "hxeditlog.LogMkdir\022\037\n\003rmr\030\003 \001(\0132\022.phxedi"
    "tlog.LogRmr\022\"\n\003cre\030\004 \001(\0132\025.phxeditlog.Lo"
    "gCreate\022,\n\003gab\030\005 \001(\0132\037.phxeditlog.LogGet"
    "AdditionalBlk\022!\n\003cle\030\006 \001(\0132\024.phxeditlog."
    "LogClose\022\035\n\002rm\030\007 \001(\0132\021.phxeditlog.LogRmb"
    "\006proto3", 807);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "phxeditlog.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_phxeditlog_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_phxeditlog_2eproto_once_);
void protobuf_AddDesc_phxeditlog_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_phxeditlog_2eproto_once_,
                 &protobuf_AddDesc_phxeditlog_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_phxeditlog_2eproto {
  StaticDescriptorInitializer_phxeditlog_2eproto() {
    protobuf_AddDesc_phxeditlog_2eproto();
  }
} static_descriptor_initializer_phxeditlog_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogMkdir::kKeyFieldNumber;
const int LogMkdir::kPermissionFieldNumber;
const int LogMkdir::kOwnerFieldNumber;
const int LogMkdir::kGroupFieldNumber;
const int LogMkdir::kModificationTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogMkdir::LogMkdir()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_phxeditlog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:phxeditlog.LogMkdir)
}

void LogMkdir::InitAsDefaultInstance() {
}

LogMkdir::LogMkdir(const LogMkdir& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:phxeditlog.LogMkdir)
}

void LogMkdir::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&modification_time_, 0, reinterpret_cast<char*>(&permission_) -
    reinterpret_cast<char*>(&modification_time_) + sizeof(permission_));
  _cached_size_ = 0;
}

LogMkdir::~LogMkdir() {
  // @@protoc_insertion_point(destructor:phxeditlog.LogMkdir)
  SharedDtor();
}

void LogMkdir::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogMkdir::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogMkdir::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogMkdir_descriptor_;
}

const LogMkdir& LogMkdir::default_instance() {
  protobuf_InitDefaults_phxeditlog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LogMkdir> LogMkdir_default_instance_;

LogMkdir* LogMkdir::New(::google::protobuf::Arena* arena) const {
  LogMkdir* n = new LogMkdir;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogMkdir::Clear() {
// @@protoc_insertion_point(message_clear_start:phxeditlog.LogMkdir)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LogMkdir, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LogMkdir*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(modification_time_, permission_);
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool LogMkdir::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:phxeditlog.LogMkdir)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "phxeditlog.LogMkdir.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_permission;
        break;
      }

      // optional uint32 permission = 2;
      case 2: {
        if (tag == 16) {
         parse_permission:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_owner;
        break;
      }

      // optional string owner = 3;
      case 3: {
        if (tag == 26) {
         parse_owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner().data(), this->owner().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "phxeditlog.LogMkdir.owner"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group;
        break;
      }

      // optional string group = 4;
      case 4: {
        if (tag == 34) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group().data(), this->group().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "phxeditlog.LogMkdir.group"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_modification_time;
        break;
      }

      // optional uint64 modification_time = 5;
      case 5: {
        if (tag == 40) {
         parse_modification_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &modification_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phxeditlog.LogMkdir)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phxeditlog.LogMkdir)
  return false;
#undef DO_
}

void LogMkdir::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phxeditlog.LogMkdir)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogMkdir.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional uint32 permission = 2;
  if (this->permission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->permission(), output);
  }

  // optional string owner = 3;
  if (this->owner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogMkdir.owner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->owner(), output);
  }

  // optional string group = 4;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogMkdir.group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->group(), output);
  }

  // optional uint64 modification_time = 5;
  if (this->modification_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->modification_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:phxeditlog.LogMkdir)
}

::google::protobuf::uint8* LogMkdir::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:phxeditlog.LogMkdir)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogMkdir.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional uint32 permission = 2;
  if (this->permission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->permission(), target);
  }

  // optional string owner = 3;
  if (this->owner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogMkdir.owner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->owner(), target);
  }

  // optional string group = 4;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogMkdir.group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->group(), target);
  }

  // optional uint64 modification_time = 5;
  if (this->modification_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->modification_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:phxeditlog.LogMkdir)
  return target;
}

size_t LogMkdir::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxeditlog.LogMkdir)
  size_t total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional uint32 permission = 2;
  if (this->permission() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->permission());
  }

  // optional string owner = 3;
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->owner());
  }

  // optional string group = 4;
  if (this->group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group());
  }

  // optional uint64 modification_time = 5;
  if (this->modification_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->modification_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogMkdir::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxeditlog.LogMkdir)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LogMkdir* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogMkdir>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxeditlog.LogMkdir)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxeditlog.LogMkdir)
    UnsafeMergeFrom(*source);
  }
}

void LogMkdir::MergeFrom(const LogMkdir& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxeditlog.LogMkdir)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LogMkdir::UnsafeMergeFrom(const LogMkdir& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.permission() != 0) {
    set_permission(from.permission());
  }
  if (from.owner().size() > 0) {

    owner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  if (from.group().size() > 0) {

    group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  if (from.modification_time() != 0) {
    set_modification_time(from.modification_time());
  }
}

void LogMkdir::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxeditlog.LogMkdir)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMkdir::CopyFrom(const LogMkdir& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxeditlog.LogMkdir)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LogMkdir::IsInitialized() const {

  return true;
}

void LogMkdir::Swap(LogMkdir* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogMkdir::InternalSwap(LogMkdir* other) {
  key_.Swap(&other->key_);
  std::swap(permission_, other->permission_);
  owner_.Swap(&other->owner_);
  group_.Swap(&other->group_);
  std::swap(modification_time_, other->modification_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogMkdir::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogMkdir_descriptor_;
  metadata.reflection = LogMkdir_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogMkdir

// optional string key = 1;
void LogMkdir::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogMkdir::key() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogMkdir.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogMkdir::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogMkdir.key)
}
void LogMkdir::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogMkdir.key)
}
void LogMkdir::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogMkdir.key)
}
::std::string* LogMkdir::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogMkdir.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogMkdir::release_key() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogMkdir.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogMkdir::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogMkdir.key)
}

// optional uint32 permission = 2;
void LogMkdir::clear_permission() {
  permission_ = 0u;
}
::google::protobuf::uint32 LogMkdir::permission() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogMkdir.permission)
  return permission_;
}
void LogMkdir::set_permission(::google::protobuf::uint32 value) {
  
  permission_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogMkdir.permission)
}

// optional string owner = 3;
void LogMkdir::clear_owner() {
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogMkdir::owner() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogMkdir.owner)
  return owner_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogMkdir::set_owner(const ::std::string& value) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogMkdir.owner)
}
void LogMkdir::set_owner(const char* value) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogMkdir.owner)
}
void LogMkdir::set_owner(const char* value, size_t size) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogMkdir.owner)
}
::std::string* LogMkdir::mutable_owner() {
  
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogMkdir.owner)
  return owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogMkdir::release_owner() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogMkdir.owner)
  
  return owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogMkdir::set_allocated_owner(::std::string* owner) {
  if (owner != NULL) {
    
  } else {
    
  }
  owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogMkdir.owner)
}

// optional string group = 4;
void LogMkdir::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogMkdir::group() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogMkdir.group)
  return group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogMkdir::set_group(const ::std::string& value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogMkdir.group)
}
void LogMkdir::set_group(const char* value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogMkdir.group)
}
void LogMkdir::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogMkdir.group)
}
::std::string* LogMkdir::mutable_group() {
  
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogMkdir.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogMkdir::release_group() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogMkdir.group)
  
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogMkdir::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogMkdir.group)
}

// optional uint64 modification_time = 5;
void LogMkdir::clear_modification_time() {
  modification_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LogMkdir::modification_time() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogMkdir.modification_time)
  return modification_time_;
}
void LogMkdir::set_modification_time(::google::protobuf::uint64 value) {
  
  modification_time_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogMkdir.modification_time)
}

inline const LogMkdir* LogMkdir::internal_default_instance() {
  return &LogMkdir_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogRmr::kKeyFieldNumber;
const int LogRmr::kModificationTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogRmr::LogRmr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_phxeditlog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:phxeditlog.LogRmr)
}

void LogRmr::InitAsDefaultInstance() {
}

LogRmr::LogRmr(const LogRmr& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:phxeditlog.LogRmr)
}

void LogRmr::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modification_time_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

LogRmr::~LogRmr() {
  // @@protoc_insertion_point(destructor:phxeditlog.LogRmr)
  SharedDtor();
}

void LogRmr::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogRmr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogRmr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogRmr_descriptor_;
}

const LogRmr& LogRmr::default_instance() {
  protobuf_InitDefaults_phxeditlog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LogRmr> LogRmr_default_instance_;

LogRmr* LogRmr::New(::google::protobuf::Arena* arena) const {
  LogRmr* n = new LogRmr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogRmr::Clear() {
// @@protoc_insertion_point(message_clear_start:phxeditlog.LogRmr)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modification_time_ = GOOGLE_ULONGLONG(0);
}

bool LogRmr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:phxeditlog.LogRmr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "phxeditlog.LogRmr.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_modification_time;
        break;
      }

      // optional uint64 modification_time = 2;
      case 2: {
        if (tag == 16) {
         parse_modification_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &modification_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phxeditlog.LogRmr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phxeditlog.LogRmr)
  return false;
#undef DO_
}

void LogRmr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phxeditlog.LogRmr)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogRmr.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional uint64 modification_time = 2;
  if (this->modification_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->modification_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:phxeditlog.LogRmr)
}

::google::protobuf::uint8* LogRmr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:phxeditlog.LogRmr)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogRmr.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional uint64 modification_time = 2;
  if (this->modification_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->modification_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:phxeditlog.LogRmr)
  return target;
}

size_t LogRmr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxeditlog.LogRmr)
  size_t total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional uint64 modification_time = 2;
  if (this->modification_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->modification_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRmr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxeditlog.LogRmr)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LogRmr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogRmr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxeditlog.LogRmr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxeditlog.LogRmr)
    UnsafeMergeFrom(*source);
  }
}

void LogRmr::MergeFrom(const LogRmr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxeditlog.LogRmr)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LogRmr::UnsafeMergeFrom(const LogRmr& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.modification_time() != 0) {
    set_modification_time(from.modification_time());
  }
}

void LogRmr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxeditlog.LogRmr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRmr::CopyFrom(const LogRmr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxeditlog.LogRmr)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LogRmr::IsInitialized() const {

  return true;
}

void LogRmr::Swap(LogRmr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogRmr::InternalSwap(LogRmr* other) {
  key_.Swap(&other->key_);
  std::swap(modification_time_, other->modification_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogRmr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogRmr_descriptor_;
  metadata.reflection = LogRmr_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogRmr

// optional string key = 1;
void LogRmr::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogRmr::key() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogRmr.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogRmr::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogRmr.key)
}
void LogRmr::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogRmr.key)
}
void LogRmr::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogRmr.key)
}
::std::string* LogRmr::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogRmr.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogRmr::release_key() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogRmr.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogRmr::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogRmr.key)
}

// optional uint64 modification_time = 2;
void LogRmr::clear_modification_time() {
  modification_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LogRmr::modification_time() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogRmr.modification_time)
  return modification_time_;
}
void LogRmr::set_modification_time(::google::protobuf::uint64 value) {
  
  modification_time_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogRmr.modification_time)
}

inline const LogRmr* LogRmr::internal_default_instance() {
  return &LogRmr_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogCreate::kKeyFieldNumber;
const int LogCreate::kPermissionFieldNumber;
const int LogCreate::kOwnerFieldNumber;
const int LogCreate::kGroupFieldNumber;
const int LogCreate::kModificationTimeFieldNumber;
const int LogCreate::kBlkIdFieldNumber;
const int LogCreate::kBlkSzFieldNumber;
const int LogCreate::kBlkRepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogCreate::LogCreate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_phxeditlog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:phxeditlog.LogCreate)
}

void LogCreate::InitAsDefaultInstance() {
}

LogCreate::LogCreate(const LogCreate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:phxeditlog.LogCreate)
}

void LogCreate::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&modification_time_, 0, reinterpret_cast<char*>(&blk_sz_) -
    reinterpret_cast<char*>(&modification_time_) + sizeof(blk_sz_));
  _cached_size_ = 0;
}

LogCreate::~LogCreate() {
  // @@protoc_insertion_point(destructor:phxeditlog.LogCreate)
  SharedDtor();
}

void LogCreate::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogCreate_descriptor_;
}

const LogCreate& LogCreate::default_instance() {
  protobuf_InitDefaults_phxeditlog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LogCreate> LogCreate_default_instance_;

LogCreate* LogCreate::New(::google::protobuf::Arena* arena) const {
  LogCreate* n = new LogCreate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:phxeditlog.LogCreate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LogCreate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LogCreate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(modification_time_, blk_sz_);
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool LogCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:phxeditlog.LogCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "phxeditlog.LogCreate.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_permission;
        break;
      }

      // optional uint32 permission = 2;
      case 2: {
        if (tag == 16) {
         parse_permission:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_owner;
        break;
      }

      // optional string owner = 3;
      case 3: {
        if (tag == 26) {
         parse_owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner().data(), this->owner().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "phxeditlog.LogCreate.owner"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group;
        break;
      }

      // optional string group = 4;
      case 4: {
        if (tag == 34) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group().data(), this->group().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "phxeditlog.LogCreate.group"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_modification_time;
        break;
      }

      // optional uint64 modification_time = 5;
      case 5: {
        if (tag == 40) {
         parse_modification_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &modification_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_blk_id;
        break;
      }

      // optional uint64 blk_id = 6;
      case 6: {
        if (tag == 48) {
         parse_blk_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blk_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_blk_sz;
        break;
      }

      // optional uint64 blk_sz = 7;
      case 7: {
        if (tag == 56) {
         parse_blk_sz:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blk_sz_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_blk_rep;
        break;
      }

      // optional uint32 blk_rep = 8;
      case 8: {
        if (tag == 64) {
         parse_blk_rep:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blk_rep_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phxeditlog.LogCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phxeditlog.LogCreate)
  return false;
#undef DO_
}

void LogCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phxeditlog.LogCreate)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogCreate.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional uint32 permission = 2;
  if (this->permission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->permission(), output);
  }

  // optional string owner = 3;
  if (this->owner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogCreate.owner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->owner(), output);
  }

  // optional string group = 4;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogCreate.group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->group(), output);
  }

  // optional uint64 modification_time = 5;
  if (this->modification_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->modification_time(), output);
  }

  // optional uint64 blk_id = 6;
  if (this->blk_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->blk_id(), output);
  }

  // optional uint64 blk_sz = 7;
  if (this->blk_sz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->blk_sz(), output);
  }

  // optional uint32 blk_rep = 8;
  if (this->blk_rep() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->blk_rep(), output);
  }

  // @@protoc_insertion_point(serialize_end:phxeditlog.LogCreate)
}

::google::protobuf::uint8* LogCreate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:phxeditlog.LogCreate)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogCreate.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional uint32 permission = 2;
  if (this->permission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->permission(), target);
  }

  // optional string owner = 3;
  if (this->owner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogCreate.owner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->owner(), target);
  }

  // optional string group = 4;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogCreate.group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->group(), target);
  }

  // optional uint64 modification_time = 5;
  if (this->modification_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->modification_time(), target);
  }

  // optional uint64 blk_id = 6;
  if (this->blk_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->blk_id(), target);
  }

  // optional uint64 blk_sz = 7;
  if (this->blk_sz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->blk_sz(), target);
  }

  // optional uint32 blk_rep = 8;
  if (this->blk_rep() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->blk_rep(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:phxeditlog.LogCreate)
  return target;
}

size_t LogCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxeditlog.LogCreate)
  size_t total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional uint32 permission = 2;
  if (this->permission() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->permission());
  }

  // optional string owner = 3;
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->owner());
  }

  // optional string group = 4;
  if (this->group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group());
  }

  // optional uint64 modification_time = 5;
  if (this->modification_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->modification_time());
  }

  // optional uint64 blk_id = 6;
  if (this->blk_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->blk_id());
  }

  // optional uint64 blk_sz = 7;
  if (this->blk_sz() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->blk_sz());
  }

  // optional uint32 blk_rep = 8;
  if (this->blk_rep() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->blk_rep());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogCreate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxeditlog.LogCreate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LogCreate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogCreate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxeditlog.LogCreate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxeditlog.LogCreate)
    UnsafeMergeFrom(*source);
  }
}

void LogCreate::MergeFrom(const LogCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxeditlog.LogCreate)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LogCreate::UnsafeMergeFrom(const LogCreate& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.permission() != 0) {
    set_permission(from.permission());
  }
  if (from.owner().size() > 0) {

    owner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  if (from.group().size() > 0) {

    group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  if (from.modification_time() != 0) {
    set_modification_time(from.modification_time());
  }
  if (from.blk_id() != 0) {
    set_blk_id(from.blk_id());
  }
  if (from.blk_sz() != 0) {
    set_blk_sz(from.blk_sz());
  }
  if (from.blk_rep() != 0) {
    set_blk_rep(from.blk_rep());
  }
}

void LogCreate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxeditlog.LogCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogCreate::CopyFrom(const LogCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxeditlog.LogCreate)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LogCreate::IsInitialized() const {

  return true;
}

void LogCreate::Swap(LogCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogCreate::InternalSwap(LogCreate* other) {
  key_.Swap(&other->key_);
  std::swap(permission_, other->permission_);
  owner_.Swap(&other->owner_);
  group_.Swap(&other->group_);
  std::swap(modification_time_, other->modification_time_);
  std::swap(blk_id_, other->blk_id_);
  std::swap(blk_sz_, other->blk_sz_);
  std::swap(blk_rep_, other->blk_rep_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogCreate_descriptor_;
  metadata.reflection = LogCreate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogCreate

// optional string key = 1;
void LogCreate::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogCreate::key() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogCreate::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.key)
}
void LogCreate::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogCreate.key)
}
void LogCreate::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogCreate.key)
}
::std::string* LogCreate::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogCreate.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogCreate::release_key() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogCreate.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogCreate::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogCreate.key)
}

// optional uint32 permission = 2;
void LogCreate::clear_permission() {
  permission_ = 0u;
}
::google::protobuf::uint32 LogCreate::permission() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.permission)
  return permission_;
}
void LogCreate::set_permission(::google::protobuf::uint32 value) {
  
  permission_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.permission)
}

// optional string owner = 3;
void LogCreate::clear_owner() {
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogCreate::owner() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.owner)
  return owner_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogCreate::set_owner(const ::std::string& value) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.owner)
}
void LogCreate::set_owner(const char* value) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogCreate.owner)
}
void LogCreate::set_owner(const char* value, size_t size) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogCreate.owner)
}
::std::string* LogCreate::mutable_owner() {
  
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogCreate.owner)
  return owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogCreate::release_owner() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogCreate.owner)
  
  return owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogCreate::set_allocated_owner(::std::string* owner) {
  if (owner != NULL) {
    
  } else {
    
  }
  owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogCreate.owner)
}

// optional string group = 4;
void LogCreate::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogCreate::group() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.group)
  return group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogCreate::set_group(const ::std::string& value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.group)
}
void LogCreate::set_group(const char* value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogCreate.group)
}
void LogCreate::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogCreate.group)
}
::std::string* LogCreate::mutable_group() {
  
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogCreate.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogCreate::release_group() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogCreate.group)
  
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogCreate::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogCreate.group)
}

// optional uint64 modification_time = 5;
void LogCreate::clear_modification_time() {
  modification_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LogCreate::modification_time() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.modification_time)
  return modification_time_;
}
void LogCreate::set_modification_time(::google::protobuf::uint64 value) {
  
  modification_time_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.modification_time)
}

// optional uint64 blk_id = 6;
void LogCreate::clear_blk_id() {
  blk_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LogCreate::blk_id() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.blk_id)
  return blk_id_;
}
void LogCreate::set_blk_id(::google::protobuf::uint64 value) {
  
  blk_id_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.blk_id)
}

// optional uint64 blk_sz = 7;
void LogCreate::clear_blk_sz() {
  blk_sz_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LogCreate::blk_sz() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.blk_sz)
  return blk_sz_;
}
void LogCreate::set_blk_sz(::google::protobuf::uint64 value) {
  
  blk_sz_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.blk_sz)
}

// optional uint32 blk_rep = 8;
void LogCreate::clear_blk_rep() {
  blk_rep_ = 0u;
}
::google::protobuf::uint32 LogCreate::blk_rep() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.blk_rep)
  return blk_rep_;
}
void LogCreate::set_blk_rep(::google::protobuf::uint32 value) {
  
  blk_rep_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.blk_rep)
}

inline const LogCreate* LogCreate::internal_default_instance() {
  return &LogCreate_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogGetAdditionalBlk::kKeyFieldNumber;
const int LogGetAdditionalBlk::kBlkIdFieldNumber;
const int LogGetAdditionalBlk::kBlkSzFieldNumber;
const int LogGetAdditionalBlk::kBlkRepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogGetAdditionalBlk::LogGetAdditionalBlk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_phxeditlog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:phxeditlog.LogGetAdditionalBlk)
}

void LogGetAdditionalBlk::InitAsDefaultInstance() {
}

LogGetAdditionalBlk::LogGetAdditionalBlk(const LogGetAdditionalBlk& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:phxeditlog.LogGetAdditionalBlk)
}

void LogGetAdditionalBlk::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&blk_id_, 0, reinterpret_cast<char*>(&blk_rep_) -
    reinterpret_cast<char*>(&blk_id_) + sizeof(blk_rep_));
  _cached_size_ = 0;
}

LogGetAdditionalBlk::~LogGetAdditionalBlk() {
  // @@protoc_insertion_point(destructor:phxeditlog.LogGetAdditionalBlk)
  SharedDtor();
}

void LogGetAdditionalBlk::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogGetAdditionalBlk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogGetAdditionalBlk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogGetAdditionalBlk_descriptor_;
}

const LogGetAdditionalBlk& LogGetAdditionalBlk::default_instance() {
  protobuf_InitDefaults_phxeditlog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LogGetAdditionalBlk> LogGetAdditionalBlk_default_instance_;

LogGetAdditionalBlk* LogGetAdditionalBlk::New(::google::protobuf::Arena* arena) const {
  LogGetAdditionalBlk* n = new LogGetAdditionalBlk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogGetAdditionalBlk::Clear() {
// @@protoc_insertion_point(message_clear_start:phxeditlog.LogGetAdditionalBlk)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LogGetAdditionalBlk, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LogGetAdditionalBlk*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(blk_id_, blk_rep_);
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool LogGetAdditionalBlk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:phxeditlog.LogGetAdditionalBlk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "phxeditlog.LogGetAdditionalBlk.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_blk_id;
        break;
      }

      // optional uint64 blk_id = 2;
      case 2: {
        if (tag == 16) {
         parse_blk_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blk_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_blk_sz;
        break;
      }

      // optional uint64 blk_sz = 3;
      case 3: {
        if (tag == 24) {
         parse_blk_sz:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blk_sz_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_blk_rep;
        break;
      }

      // optional uint32 blk_rep = 4;
      case 4: {
        if (tag == 32) {
         parse_blk_rep:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blk_rep_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phxeditlog.LogGetAdditionalBlk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phxeditlog.LogGetAdditionalBlk)
  return false;
#undef DO_
}

void LogGetAdditionalBlk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phxeditlog.LogGetAdditionalBlk)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogGetAdditionalBlk.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional uint64 blk_id = 2;
  if (this->blk_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->blk_id(), output);
  }

  // optional uint64 blk_sz = 3;
  if (this->blk_sz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->blk_sz(), output);
  }

  // optional uint32 blk_rep = 4;
  if (this->blk_rep() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->blk_rep(), output);
  }

  // @@protoc_insertion_point(serialize_end:phxeditlog.LogGetAdditionalBlk)
}

::google::protobuf::uint8* LogGetAdditionalBlk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:phxeditlog.LogGetAdditionalBlk)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogGetAdditionalBlk.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional uint64 blk_id = 2;
  if (this->blk_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->blk_id(), target);
  }

  // optional uint64 blk_sz = 3;
  if (this->blk_sz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->blk_sz(), target);
  }

  // optional uint32 blk_rep = 4;
  if (this->blk_rep() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->blk_rep(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:phxeditlog.LogGetAdditionalBlk)
  return target;
}

size_t LogGetAdditionalBlk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxeditlog.LogGetAdditionalBlk)
  size_t total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional uint64 blk_id = 2;
  if (this->blk_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->blk_id());
  }

  // optional uint64 blk_sz = 3;
  if (this->blk_sz() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->blk_sz());
  }

  // optional uint32 blk_rep = 4;
  if (this->blk_rep() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->blk_rep());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogGetAdditionalBlk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxeditlog.LogGetAdditionalBlk)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LogGetAdditionalBlk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogGetAdditionalBlk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxeditlog.LogGetAdditionalBlk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxeditlog.LogGetAdditionalBlk)
    UnsafeMergeFrom(*source);
  }
}

void LogGetAdditionalBlk::MergeFrom(const LogGetAdditionalBlk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxeditlog.LogGetAdditionalBlk)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LogGetAdditionalBlk::UnsafeMergeFrom(const LogGetAdditionalBlk& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.blk_id() != 0) {
    set_blk_id(from.blk_id());
  }
  if (from.blk_sz() != 0) {
    set_blk_sz(from.blk_sz());
  }
  if (from.blk_rep() != 0) {
    set_blk_rep(from.blk_rep());
  }
}

void LogGetAdditionalBlk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxeditlog.LogGetAdditionalBlk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogGetAdditionalBlk::CopyFrom(const LogGetAdditionalBlk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxeditlog.LogGetAdditionalBlk)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LogGetAdditionalBlk::IsInitialized() const {

  return true;
}

void LogGetAdditionalBlk::Swap(LogGetAdditionalBlk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogGetAdditionalBlk::InternalSwap(LogGetAdditionalBlk* other) {
  key_.Swap(&other->key_);
  std::swap(blk_id_, other->blk_id_);
  std::swap(blk_sz_, other->blk_sz_);
  std::swap(blk_rep_, other->blk_rep_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogGetAdditionalBlk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogGetAdditionalBlk_descriptor_;
  metadata.reflection = LogGetAdditionalBlk_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogGetAdditionalBlk

// optional string key = 1;
void LogGetAdditionalBlk::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogGetAdditionalBlk::key() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogGetAdditionalBlk.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogGetAdditionalBlk::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogGetAdditionalBlk.key)
}
void LogGetAdditionalBlk::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogGetAdditionalBlk.key)
}
void LogGetAdditionalBlk::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogGetAdditionalBlk.key)
}
::std::string* LogGetAdditionalBlk::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogGetAdditionalBlk.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogGetAdditionalBlk::release_key() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogGetAdditionalBlk.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogGetAdditionalBlk::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogGetAdditionalBlk.key)
}

// optional uint64 blk_id = 2;
void LogGetAdditionalBlk::clear_blk_id() {
  blk_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LogGetAdditionalBlk::blk_id() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogGetAdditionalBlk.blk_id)
  return blk_id_;
}
void LogGetAdditionalBlk::set_blk_id(::google::protobuf::uint64 value) {
  
  blk_id_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogGetAdditionalBlk.blk_id)
}

// optional uint64 blk_sz = 3;
void LogGetAdditionalBlk::clear_blk_sz() {
  blk_sz_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LogGetAdditionalBlk::blk_sz() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogGetAdditionalBlk.blk_sz)
  return blk_sz_;
}
void LogGetAdditionalBlk::set_blk_sz(::google::protobuf::uint64 value) {
  
  blk_sz_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogGetAdditionalBlk.blk_sz)
}

// optional uint32 blk_rep = 4;
void LogGetAdditionalBlk::clear_blk_rep() {
  blk_rep_ = 0u;
}
::google::protobuf::uint32 LogGetAdditionalBlk::blk_rep() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogGetAdditionalBlk.blk_rep)
  return blk_rep_;
}
void LogGetAdditionalBlk::set_blk_rep(::google::protobuf::uint32 value) {
  
  blk_rep_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogGetAdditionalBlk.blk_rep)
}

inline const LogGetAdditionalBlk* LogGetAdditionalBlk::internal_default_instance() {
  return &LogGetAdditionalBlk_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogClose::kKeyFieldNumber;
const int LogClose::kModificationTimeFieldNumber;
const int LogClose::kLenFieldNumber;
const int LogClose::kBlkRepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogClose::LogClose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_phxeditlog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:phxeditlog.LogClose)
}

void LogClose::InitAsDefaultInstance() {
}

LogClose::LogClose(const LogClose& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:phxeditlog.LogClose)
}

void LogClose::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&modification_time_, 0, reinterpret_cast<char*>(&blk_rep_) -
    reinterpret_cast<char*>(&modification_time_) + sizeof(blk_rep_));
  _cached_size_ = 0;
}

LogClose::~LogClose() {
  // @@protoc_insertion_point(destructor:phxeditlog.LogClose)
  SharedDtor();
}

void LogClose::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogClose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogClose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogClose_descriptor_;
}

const LogClose& LogClose::default_instance() {
  protobuf_InitDefaults_phxeditlog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LogClose> LogClose_default_instance_;

LogClose* LogClose::New(::google::protobuf::Arena* arena) const {
  LogClose* n = new LogClose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogClose::Clear() {
// @@protoc_insertion_point(message_clear_start:phxeditlog.LogClose)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LogClose, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LogClose*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(modification_time_, blk_rep_);
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool LogClose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:phxeditlog.LogClose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "phxeditlog.LogClose.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_modification_time;
        break;
      }

      // optional uint64 modification_time = 2;
      case 2: {
        if (tag == 16) {
         parse_modification_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &modification_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_len;
        break;
      }

      // optional uint64 len = 3;
      case 3: {
        if (tag == 24) {
         parse_len:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &len_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_blk_rep;
        break;
      }

      // optional uint32 blk_rep = 4;
      case 4: {
        if (tag == 32) {
         parse_blk_rep:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blk_rep_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phxeditlog.LogClose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phxeditlog.LogClose)
  return false;
#undef DO_
}

void LogClose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phxeditlog.LogClose)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogClose.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional uint64 modification_time = 2;
  if (this->modification_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->modification_time(), output);
  }

  // optional uint64 len = 3;
  if (this->len() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->len(), output);
  }

  // optional uint32 blk_rep = 4;
  if (this->blk_rep() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->blk_rep(), output);
  }

  // @@protoc_insertion_point(serialize_end:phxeditlog.LogClose)
}

::google::protobuf::uint8* LogClose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:phxeditlog.LogClose)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogClose.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional uint64 modification_time = 2;
  if (this->modification_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->modification_time(), target);
  }

  // optional uint64 len = 3;
  if (this->len() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->len(), target);
  }

  // optional uint32 blk_rep = 4;
  if (this->blk_rep() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->blk_rep(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:phxeditlog.LogClose)
  return target;
}

size_t LogClose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxeditlog.LogClose)
  size_t total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional uint64 modification_time = 2;
  if (this->modification_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->modification_time());
  }

  // optional uint64 len = 3;
  if (this->len() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->len());
  }

  // optional uint32 blk_rep = 4;
  if (this->blk_rep() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->blk_rep());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogClose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxeditlog.LogClose)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LogClose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogClose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxeditlog.LogClose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxeditlog.LogClose)
    UnsafeMergeFrom(*source);
  }
}

void LogClose::MergeFrom(const LogClose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxeditlog.LogClose)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LogClose::UnsafeMergeFrom(const LogClose& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.modification_time() != 0) {
    set_modification_time(from.modification_time());
  }
  if (from.len() != 0) {
    set_len(from.len());
  }
  if (from.blk_rep() != 0) {
    set_blk_rep(from.blk_rep());
  }
}

void LogClose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxeditlog.LogClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogClose::CopyFrom(const LogClose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxeditlog.LogClose)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LogClose::IsInitialized() const {

  return true;
}

void LogClose::Swap(LogClose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogClose::InternalSwap(LogClose* other) {
  key_.Swap(&other->key_);
  std::swap(modification_time_, other->modification_time_);
  std::swap(len_, other->len_);
  std::swap(blk_rep_, other->blk_rep_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogClose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogClose_descriptor_;
  metadata.reflection = LogClose_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogClose

// optional string key = 1;
void LogClose::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogClose::key() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogClose.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogClose::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogClose.key)
}
void LogClose::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogClose.key)
}
void LogClose::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogClose.key)
}
::std::string* LogClose::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogClose.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogClose::release_key() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogClose.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogClose::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogClose.key)
}

// optional uint64 modification_time = 2;
void LogClose::clear_modification_time() {
  modification_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LogClose::modification_time() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogClose.modification_time)
  return modification_time_;
}
void LogClose::set_modification_time(::google::protobuf::uint64 value) {
  
  modification_time_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogClose.modification_time)
}

// optional uint64 len = 3;
void LogClose::clear_len() {
  len_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LogClose::len() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogClose.len)
  return len_;
}
void LogClose::set_len(::google::protobuf::uint64 value) {
  
  len_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogClose.len)
}

// optional uint32 blk_rep = 4;
void LogClose::clear_blk_rep() {
  blk_rep_ = 0u;
}
::google::protobuf::uint32 LogClose::blk_rep() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogClose.blk_rep)
  return blk_rep_;
}
void LogClose::set_blk_rep(::google::protobuf::uint32 value) {
  
  blk_rep_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogClose.blk_rep)
}

inline const LogClose* LogClose::internal_default_instance() {
  return &LogClose_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogRm::kKeyFieldNumber;
const int LogRm::kModificationTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogRm::LogRm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_phxeditlog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:phxeditlog.LogRm)
}

void LogRm::InitAsDefaultInstance() {
}

LogRm::LogRm(const LogRm& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:phxeditlog.LogRm)
}

void LogRm::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modification_time_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

LogRm::~LogRm() {
  // @@protoc_insertion_point(destructor:phxeditlog.LogRm)
  SharedDtor();
}

void LogRm::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogRm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogRm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogRm_descriptor_;
}

const LogRm& LogRm::default_instance() {
  protobuf_InitDefaults_phxeditlog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LogRm> LogRm_default_instance_;

LogRm* LogRm::New(::google::protobuf::Arena* arena) const {
  LogRm* n = new LogRm;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogRm::Clear() {
// @@protoc_insertion_point(message_clear_start:phxeditlog.LogRm)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modification_time_ = GOOGLE_ULONGLONG(0);
}

bool LogRm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:phxeditlog.LogRm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "phxeditlog.LogRm.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_modification_time;
        break;
      }

      // optional uint64 modification_time = 2;
      case 2: {
        if (tag == 16) {
         parse_modification_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &modification_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phxeditlog.LogRm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phxeditlog.LogRm)
  return false;
#undef DO_
}

void LogRm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phxeditlog.LogRm)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogRm.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional uint64 modification_time = 2;
  if (this->modification_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->modification_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:phxeditlog.LogRm)
}

::google::protobuf::uint8* LogRm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:phxeditlog.LogRm)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogRm.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional uint64 modification_time = 2;
  if (this->modification_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->modification_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:phxeditlog.LogRm)
  return target;
}

size_t LogRm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxeditlog.LogRm)
  size_t total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional uint64 modification_time = 2;
  if (this->modification_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->modification_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxeditlog.LogRm)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LogRm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogRm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxeditlog.LogRm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxeditlog.LogRm)
    UnsafeMergeFrom(*source);
  }
}

void LogRm::MergeFrom(const LogRm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxeditlog.LogRm)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LogRm::UnsafeMergeFrom(const LogRm& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.modification_time() != 0) {
    set_modification_time(from.modification_time());
  }
}

void LogRm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxeditlog.LogRm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRm::CopyFrom(const LogRm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxeditlog.LogRm)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LogRm::IsInitialized() const {

  return true;
}

void LogRm::Swap(LogRm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogRm::InternalSwap(LogRm* other) {
  key_.Swap(&other->key_);
  std::swap(modification_time_, other->modification_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogRm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogRm_descriptor_;
  metadata.reflection = LogRm_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogRm

// optional string key = 1;
void LogRm::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogRm::key() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogRm.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogRm::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogRm.key)
}
void LogRm::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogRm.key)
}
void LogRm::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogRm.key)
}
::std::string* LogRm::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogRm.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogRm::release_key() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogRm.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogRm::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogRm.key)
}

// optional uint64 modification_time = 2;
void LogRm::clear_modification_time() {
  modification_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LogRm::modification_time() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogRm.modification_time)
  return modification_time_;
}
void LogRm::set_modification_time(::google::protobuf::uint64 value) {
  
  modification_time_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogRm.modification_time)
}

inline const LogRm* LogRm::internal_default_instance() {
  return &LogRm_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogOperator::kOptypeFieldNumber;
const int LogOperator::kMkrFieldNumber;
const int LogOperator::kRmrFieldNumber;
const int LogOperator::kCreFieldNumber;
const int LogOperator::kGabFieldNumber;
const int LogOperator::kCleFieldNumber;
const int LogOperator::kRmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogOperator::LogOperator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_phxeditlog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:phxeditlog.LogOperator)
}

void LogOperator::InitAsDefaultInstance() {
  mkr_ = const_cast< ::phxeditlog::LogMkdir*>(
      ::phxeditlog::LogMkdir::internal_default_instance());
  rmr_ = const_cast< ::phxeditlog::LogRmr*>(
      ::phxeditlog::LogRmr::internal_default_instance());
  cre_ = const_cast< ::phxeditlog::LogCreate*>(
      ::phxeditlog::LogCreate::internal_default_instance());
  gab_ = const_cast< ::phxeditlog::LogGetAdditionalBlk*>(
      ::phxeditlog::LogGetAdditionalBlk::internal_default_instance());
  cle_ = const_cast< ::phxeditlog::LogClose*>(
      ::phxeditlog::LogClose::internal_default_instance());
  rm_ = const_cast< ::phxeditlog::LogRm*>(
      ::phxeditlog::LogRm::internal_default_instance());
}

LogOperator::LogOperator(const LogOperator& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:phxeditlog.LogOperator)
}

void LogOperator::SharedCtor() {
  mkr_ = NULL;
  rmr_ = NULL;
  cre_ = NULL;
  gab_ = NULL;
  cle_ = NULL;
  rm_ = NULL;
  optype_ = 0u;
  _cached_size_ = 0;
}

LogOperator::~LogOperator() {
  // @@protoc_insertion_point(destructor:phxeditlog.LogOperator)
  SharedDtor();
}

void LogOperator::SharedDtor() {
  if (this != &LogOperator_default_instance_.get()) {
    delete mkr_;
    delete rmr_;
    delete cre_;
    delete gab_;
    delete cle_;
    delete rm_;
  }
}

void LogOperator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogOperator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogOperator_descriptor_;
}

const LogOperator& LogOperator::default_instance() {
  protobuf_InitDefaults_phxeditlog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LogOperator> LogOperator_default_instance_;

LogOperator* LogOperator::New(::google::protobuf::Arena* arena) const {
  LogOperator* n = new LogOperator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:phxeditlog.LogOperator)
  optype_ = 0u;
  if (GetArenaNoVirtual() == NULL && mkr_ != NULL) delete mkr_;
  mkr_ = NULL;
  if (GetArenaNoVirtual() == NULL && rmr_ != NULL) delete rmr_;
  rmr_ = NULL;
  if (GetArenaNoVirtual() == NULL && cre_ != NULL) delete cre_;
  cre_ = NULL;
  if (GetArenaNoVirtual() == NULL && gab_ != NULL) delete gab_;
  gab_ = NULL;
  if (GetArenaNoVirtual() == NULL && cle_ != NULL) delete cle_;
  cle_ = NULL;
  if (GetArenaNoVirtual() == NULL && rm_ != NULL) delete rm_;
  rm_ = NULL;
}

bool LogOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:phxeditlog.LogOperator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 optype = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mkr;
        break;
      }

      // optional .phxeditlog.LogMkdir mkr = 2;
      case 2: {
        if (tag == 18) {
         parse_mkr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mkr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rmr;
        break;
      }

      // optional .phxeditlog.LogRmr rmr = 3;
      case 3: {
        if (tag == 26) {
         parse_rmr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rmr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cre;
        break;
      }

      // optional .phxeditlog.LogCreate cre = 4;
      case 4: {
        if (tag == 34) {
         parse_cre:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cre()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_gab;
        break;
      }

      // optional .phxeditlog.LogGetAdditionalBlk gab = 5;
      case 5: {
        if (tag == 42) {
         parse_gab:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gab()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cle;
        break;
      }

      // optional .phxeditlog.LogClose cle = 6;
      case 6: {
        if (tag == 50) {
         parse_cle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_rm;
        break;
      }

      // optional .phxeditlog.LogRm rm = 7;
      case 7: {
        if (tag == 58) {
         parse_rm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rm()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phxeditlog.LogOperator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phxeditlog.LogOperator)
  return false;
#undef DO_
}

void LogOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phxeditlog.LogOperator)
  // optional uint32 optype = 1;
  if (this->optype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->optype(), output);
  }

  // optional .phxeditlog.LogMkdir mkr = 2;
  if (this->has_mkr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->mkr_, output);
  }

  // optional .phxeditlog.LogRmr rmr = 3;
  if (this->has_rmr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->rmr_, output);
  }

  // optional .phxeditlog.LogCreate cre = 4;
  if (this->has_cre()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->cre_, output);
  }

  // optional .phxeditlog.LogGetAdditionalBlk gab = 5;
  if (this->has_gab()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->gab_, output);
  }

  // optional .phxeditlog.LogClose cle = 6;
  if (this->has_cle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->cle_, output);
  }

  // optional .phxeditlog.LogRm rm = 7;
  if (this->has_rm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->rm_, output);
  }

  // @@protoc_insertion_point(serialize_end:phxeditlog.LogOperator)
}

::google::protobuf::uint8* LogOperator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:phxeditlog.LogOperator)
  // optional uint32 optype = 1;
  if (this->optype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->optype(), target);
  }

  // optional .phxeditlog.LogMkdir mkr = 2;
  if (this->has_mkr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->mkr_, false, target);
  }

  // optional .phxeditlog.LogRmr rmr = 3;
  if (this->has_rmr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->rmr_, false, target);
  }

  // optional .phxeditlog.LogCreate cre = 4;
  if (this->has_cre()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->cre_, false, target);
  }

  // optional .phxeditlog.LogGetAdditionalBlk gab = 5;
  if (this->has_gab()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->gab_, false, target);
  }

  // optional .phxeditlog.LogClose cle = 6;
  if (this->has_cle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->cle_, false, target);
  }

  // optional .phxeditlog.LogRm rm = 7;
  if (this->has_rm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->rm_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:phxeditlog.LogOperator)
  return target;
}

size_t LogOperator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxeditlog.LogOperator)
  size_t total_size = 0;

  // optional uint32 optype = 1;
  if (this->optype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->optype());
  }

  // optional .phxeditlog.LogMkdir mkr = 2;
  if (this->has_mkr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mkr_);
  }

  // optional .phxeditlog.LogRmr rmr = 3;
  if (this->has_rmr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rmr_);
  }

  // optional .phxeditlog.LogCreate cre = 4;
  if (this->has_cre()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cre_);
  }

  // optional .phxeditlog.LogGetAdditionalBlk gab = 5;
  if (this->has_gab()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gab_);
  }

  // optional .phxeditlog.LogClose cle = 6;
  if (this->has_cle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cle_);
  }

  // optional .phxeditlog.LogRm rm = 7;
  if (this->has_rm()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rm_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogOperator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxeditlog.LogOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LogOperator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogOperator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxeditlog.LogOperator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxeditlog.LogOperator)
    UnsafeMergeFrom(*source);
  }
}

void LogOperator::MergeFrom(const LogOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxeditlog.LogOperator)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LogOperator::UnsafeMergeFrom(const LogOperator& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.optype() != 0) {
    set_optype(from.optype());
  }
  if (from.has_mkr()) {
    mutable_mkr()->::phxeditlog::LogMkdir::MergeFrom(from.mkr());
  }
  if (from.has_rmr()) {
    mutable_rmr()->::phxeditlog::LogRmr::MergeFrom(from.rmr());
  }
  if (from.has_cre()) {
    mutable_cre()->::phxeditlog::LogCreate::MergeFrom(from.cre());
  }
  if (from.has_gab()) {
    mutable_gab()->::phxeditlog::LogGetAdditionalBlk::MergeFrom(from.gab());
  }
  if (from.has_cle()) {
    mutable_cle()->::phxeditlog::LogClose::MergeFrom(from.cle());
  }
  if (from.has_rm()) {
    mutable_rm()->::phxeditlog::LogRm::MergeFrom(from.rm());
  }
}

void LogOperator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxeditlog.LogOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogOperator::CopyFrom(const LogOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxeditlog.LogOperator)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LogOperator::IsInitialized() const {

  return true;
}

void LogOperator::Swap(LogOperator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogOperator::InternalSwap(LogOperator* other) {
  std::swap(optype_, other->optype_);
  std::swap(mkr_, other->mkr_);
  std::swap(rmr_, other->rmr_);
  std::swap(cre_, other->cre_);
  std::swap(gab_, other->gab_);
  std::swap(cle_, other->cle_);
  std::swap(rm_, other->rm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogOperator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogOperator_descriptor_;
  metadata.reflection = LogOperator_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogOperator

// optional uint32 optype = 1;
void LogOperator::clear_optype() {
  optype_ = 0u;
}
::google::protobuf::uint32 LogOperator::optype() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogOperator.optype)
  return optype_;
}
void LogOperator::set_optype(::google::protobuf::uint32 value) {
  
  optype_ = value;
  // @@protoc_insertion_point(field_set:phxeditlog.LogOperator.optype)
}

// optional .phxeditlog.LogMkdir mkr = 2;
bool LogOperator::has_mkr() const {
  return this != internal_default_instance() && mkr_ != NULL;
}
void LogOperator::clear_mkr() {
  if (GetArenaNoVirtual() == NULL && mkr_ != NULL) delete mkr_;
  mkr_ = NULL;
}
const ::phxeditlog::LogMkdir& LogOperator::mkr() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogOperator.mkr)
  return mkr_ != NULL ? *mkr_
                         : *::phxeditlog::LogMkdir::internal_default_instance();
}
::phxeditlog::LogMkdir* LogOperator::mutable_mkr() {
  
  if (mkr_ == NULL) {
    mkr_ = new ::phxeditlog::LogMkdir;
  }
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogOperator.mkr)
  return mkr_;
}
::phxeditlog::LogMkdir* LogOperator::release_mkr() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogOperator.mkr)
  
  ::phxeditlog::LogMkdir* temp = mkr_;
  mkr_ = NULL;
  return temp;
}
void LogOperator::set_allocated_mkr(::phxeditlog::LogMkdir* mkr) {
  delete mkr_;
  mkr_ = mkr;
  if (mkr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogOperator.mkr)
}

// optional .phxeditlog.LogRmr rmr = 3;
bool LogOperator::has_rmr() const {
  return this != internal_default_instance() && rmr_ != NULL;
}
void LogOperator::clear_rmr() {
  if (GetArenaNoVirtual() == NULL && rmr_ != NULL) delete rmr_;
  rmr_ = NULL;
}
const ::phxeditlog::LogRmr& LogOperator::rmr() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogOperator.rmr)
  return rmr_ != NULL ? *rmr_
                         : *::phxeditlog::LogRmr::internal_default_instance();
}
::phxeditlog::LogRmr* LogOperator::mutable_rmr() {
  
  if (rmr_ == NULL) {
    rmr_ = new ::phxeditlog::LogRmr;
  }
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogOperator.rmr)
  return rmr_;
}
::phxeditlog::LogRmr* LogOperator::release_rmr() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogOperator.rmr)
  
  ::phxeditlog::LogRmr* temp = rmr_;
  rmr_ = NULL;
  return temp;
}
void LogOperator::set_allocated_rmr(::phxeditlog::LogRmr* rmr) {
  delete rmr_;
  rmr_ = rmr;
  if (rmr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogOperator.rmr)
}

// optional .phxeditlog.LogCreate cre = 4;
bool LogOperator::has_cre() const {
  return this != internal_default_instance() && cre_ != NULL;
}
void LogOperator::clear_cre() {
  if (GetArenaNoVirtual() == NULL && cre_ != NULL) delete cre_;
  cre_ = NULL;
}
const ::phxeditlog::LogCreate& LogOperator::cre() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogOperator.cre)
  return cre_ != NULL ? *cre_
                         : *::phxeditlog::LogCreate::internal_default_instance();
}
::phxeditlog::LogCreate* LogOperator::mutable_cre() {
  
  if (cre_ == NULL) {
    cre_ = new ::phxeditlog::LogCreate;
  }
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogOperator.cre)
  return cre_;
}
::phxeditlog::LogCreate* LogOperator::release_cre() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogOperator.cre)
  
  ::phxeditlog::LogCreate* temp = cre_;
  cre_ = NULL;
  return temp;
}
void LogOperator::set_allocated_cre(::phxeditlog::LogCreate* cre) {
  delete cre_;
  cre_ = cre;
  if (cre) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogOperator.cre)
}

// optional .phxeditlog.LogGetAdditionalBlk gab = 5;
bool LogOperator::has_gab() const {
  return this != internal_default_instance() && gab_ != NULL;
}
void LogOperator::clear_gab() {
  if (GetArenaNoVirtual() == NULL && gab_ != NULL) delete gab_;
  gab_ = NULL;
}
const ::phxeditlog::LogGetAdditionalBlk& LogOperator::gab() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogOperator.gab)
  return gab_ != NULL ? *gab_
                         : *::phxeditlog::LogGetAdditionalBlk::internal_default_instance();
}
::phxeditlog::LogGetAdditionalBlk* LogOperator::mutable_gab() {
  
  if (gab_ == NULL) {
    gab_ = new ::phxeditlog::LogGetAdditionalBlk;
  }
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogOperator.gab)
  return gab_;
}
::phxeditlog::LogGetAdditionalBlk* LogOperator::release_gab() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogOperator.gab)
  
  ::phxeditlog::LogGetAdditionalBlk* temp = gab_;
  gab_ = NULL;
  return temp;
}
void LogOperator::set_allocated_gab(::phxeditlog::LogGetAdditionalBlk* gab) {
  delete gab_;
  gab_ = gab;
  if (gab) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogOperator.gab)
}

// optional .phxeditlog.LogClose cle = 6;
bool LogOperator::has_cle() const {
  return this != internal_default_instance() && cle_ != NULL;
}
void LogOperator::clear_cle() {
  if (GetArenaNoVirtual() == NULL && cle_ != NULL) delete cle_;
  cle_ = NULL;
}
const ::phxeditlog::LogClose& LogOperator::cle() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogOperator.cle)
  return cle_ != NULL ? *cle_
                         : *::phxeditlog::LogClose::internal_default_instance();
}
::phxeditlog::LogClose* LogOperator::mutable_cle() {
  
  if (cle_ == NULL) {
    cle_ = new ::phxeditlog::LogClose;
  }
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogOperator.cle)
  return cle_;
}
::phxeditlog::LogClose* LogOperator::release_cle() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogOperator.cle)
  
  ::phxeditlog::LogClose* temp = cle_;
  cle_ = NULL;
  return temp;
}
void LogOperator::set_allocated_cle(::phxeditlog::LogClose* cle) {
  delete cle_;
  cle_ = cle;
  if (cle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogOperator.cle)
}

// optional .phxeditlog.LogRm rm = 7;
bool LogOperator::has_rm() const {
  return this != internal_default_instance() && rm_ != NULL;
}
void LogOperator::clear_rm() {
  if (GetArenaNoVirtual() == NULL && rm_ != NULL) delete rm_;
  rm_ = NULL;
}
const ::phxeditlog::LogRm& LogOperator::rm() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogOperator.rm)
  return rm_ != NULL ? *rm_
                         : *::phxeditlog::LogRm::internal_default_instance();
}
::phxeditlog::LogRm* LogOperator::mutable_rm() {
  
  if (rm_ == NULL) {
    rm_ = new ::phxeditlog::LogRm;
  }
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogOperator.rm)
  return rm_;
}
::phxeditlog::LogRm* LogOperator::release_rm() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogOperator.rm)
  
  ::phxeditlog::LogRm* temp = rm_;
  rm_ = NULL;
  return temp;
}
void LogOperator::set_allocated_rm(::phxeditlog::LogRm* rm) {
  delete rm_;
  rm_ = rm;
  if (rm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogOperator.rm)
}

inline const LogOperator* LogOperator::internal_default_instance() {
  return &LogOperator_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace phxeditlog

// @@protoc_insertion_point(global_scope)
