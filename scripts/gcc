
DFS_GCC_VER=`$CC -v 2>&1 | grep 'gcc version' 2>&1 | sed -e 's/^.* version \(.*\)/\1/'`

echo " + gcc version: $DFS_GCC_VER"

have=DFS_COMPILER value="\"gcc $DFS_GCC_VER\"" . scripts/define


CC_TEST_FLAGS="-pipe"

dfs_feature="gcc -pipe switch"
dfs_feature_name=
dfs_feature_run=no
dfs_feature_incs=
dfs_feature_path=
dfs_feature_libs=
dfs_feature_test=
. scripts/feature

CC_TEST_FLAGS=

if [ $dfs_found = yes ]; then
    PIPE="-pipe"
fi

case $CPU in
    pentium)
        # optimize for Pentium and Athlon
        CPU_OPT="-march=pentium"
        DFS_CPU_CACHE_LINE=32
    ;;

    pentiumpro | pentium3)
        # optimize for Pentium Pro, Pentium II and Pentium III
        CPU_OPT="-march=pentiumpro"
        DFS_CPU_CACHE_LINE=32
    ;;

    pentium4)
        # optimize for Pentium 4, gcc 3.x
        CPU_OPT="-march=pentium4"
        DFS_CPU_CACHE_LINE=128
    ;;

    athlon)
        # optimize for Athlon, gcc 3.x
        CPU_OPT="-march=athlon"
        DFS_CPU_CACHE_LINE=64
    ;;

    opteron)
        # optimize for Opteron, gcc 3.x
        CPU_OPT="-march=opteron"
        DFS_CPU_CACHE_LINE=64
    ;;

    sparc32)
        # scripts 32-bit UltraSparc binary
        CPU_OPT="-m32"
        CORE_LINK="$CORE_LINK -m32"
        DFS_CPU_CACHE_LINE=64
    ;;

    sparc64)
        # scripts 64-bit UltraSparc binary
        CPU_OPT="-m64"
        CORE_LINK="$CORE_LINK -m64"
        DFS_CPU_CACHE_LINE=64
    ;;

    ppc64)
        # scripts 64-bit PowerPC binary
        CPU_OPT="-m64"
        CPU_OPT="$CPU_OPT -falign-functions=32 -falign-labels=32"
        CPU_OPT="$CPU_OPT -falign-loops=32 -falign-jumps=32"
        CORE_LINK="$CORE_LINK -m64"
        DFS_CPU_CACHE_LINE=128
    ;;

esac

CC_AUX_FLAGS="$CC_AUX_FLAGS $CPU_OPT"

case "$DFS_GCC_VER" in
    2.7*)
        # batch build
        CPU_OPT=
    ;;
esac


CFLAGS="$CFLAGS $PIPE $CPU_OPT"

if [ ".$PCRE_OPT" = "." ]; then
    PCRE_OPT="-fomit-frame-pointer $PIPE $CPU_OPT"
else
    PCRE_OPT="$PCRE_OPT $PIPE"
fi

if [ ".$MD5_OPT" = "." ]; then
    MD5_OPT="-fomit-frame-pointer $PIPE $CPU_OPT"
else
    MD5_OPT="$MD5_OPT $PIPE"
fi

if [ ".$ZLIB_OPT" = "." ]; then
    ZLIB_OPT="-fomit-frame-pointer $PIPE $CPU_OPT"
else
    ZLIB_OPT="$ZLIB_OPT $PIPE"
fi


CFLAGS="-g -DHAVE_UTIMES -D_GNU_SOURCE"

if [ "$DEBUG_MEM" = "on" ]; then
    CFLAGS="$CFLAGS -DDEBUG_MEM"
fi 

if [ "$NO_LICENSE" = "on" ]; then
    CFLAGS="$CFLAGS -DNO_LICENSE"
fi

# warnings

CFLAGS="$CFLAGS -W"

CFLAGS="$CFLAGS -Wall -Wno-unused-function"
#CFLAGS="$CFLAGS -Wall -Wpointer-arith -Wno-unused-function"
#CFLAGS="$CFLAGS -Wconversion"
#CFLAGS="$CFLAGS -Winline"
#CFLAGS="$CFLAGS -Wmissing-prototypes"


case "$DFS_GCC_VER" in
    3.* | 4.* )
        # we have a lot of the unused function arguments
        CFLAGS="$CFLAGS -Wno-unused-parameter"
        # 4.2.1 shows the warning in wrong places
        #CFLAGS="$CFLAGS -Wunreachable-code"
    ;;

    *)
        # we have a lot of the unused function arguments
        CFLAGS="$CFLAGS -Wno-unused"
    ;;
esac


# stop on warning
CFLAGS="$CFLAGS -Werror"

# debug
CFLAGS="$CFLAGS -g"

# DragonFly's gcc3 generates DWARF
#CFLAGS="$CFLAGS -g -gstabs"

if [ ".$CPP" = "." ]; then
    CPP="$CC -E"
fi

